!pip install rembg
!pip install accelerate
!pip install diffusers==0.24

import rembg
import accelerate
import torch
import numpy as np
from PIL import Image,ImageOps
from diffusers import AutoPipelineForInpainting
from diffusers.utils import load_image, make_image_grid
from PIL import ImageFilter

# Load the input image
init_image = load_image("/content/product5.jpg").resize((808,704))
print(init_image)

# Convert the input image to a numpy array
input_array = np.array(init_image)

# Extract mask using rembg
mask_array = rembg.remove(input_array, only_mask=True)

# Create a PIL Image from the output array
mask_image = Image.fromarray(mask_array)
mask_image_inverted = ImageOps.invert(mask_image)

# Display inverted mask
mask_image_inverted

pipeline = AutoPipelineForInpainting.from_pretrained(
    "diffusers/stable-diffusion-xl-1.0-inpainting-0.1", torch_dtype=torch.float16, variant="fp16"
)
pipeline.enable_model_cpu_offload()

# I have also used another model

# Create inpainting pipeline
pipeline = AutoPipelineForInpainting.from_pretrained(
    "redstonehero/ReV_Animated_Inpainting",
    torch_dtype=torch.float16
)

pipeline.enable_model_cpu_offload()


prompt = """ A 3D camera is resting on a wooden table with a worn finish"""

negative_prompt = "blur, noise, unreadable text, blurry text, Do not show the camera with any digital elements like screens or buttons"


image = pipeline(prompt=prompt,
             negative_prompt =negative_prompt,
             width=2248,
             height=1496,
             num_inference_steps=30,
             image=init_image,
             mask_image=mask_image_inverted,
             guidance_scale=14,
             strength=0.99,
             generator=torch.manual_seed(189012)).images[0]
image
